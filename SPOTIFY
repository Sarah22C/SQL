--# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 
--First I determined which artist has the most songs in the top 50 at the moment?
SELECT artist_name, COUNT(artist_name)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(artist_name) desc
LIMIT 1;

--Then I determined What the most popular song was and who was the artist.
SELECT artist_name, popularity, track_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc
LIMIT 1;

--Next, I wanted to find the least popular song and who was the artist.
SELECT artist_name, popularity, track_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity asc
LIMIT 1;

--Lastly, I wanted to know what the average danceability for the top 10 most popular tracks was.
SELECT AVG(danceability)
FROM BIT_DB.Spotifydata
WHERE track_name IN 
(SELECT track_name
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10);
